#!/usr/bin/python3

import argparse
import datetime
import calendar
import logging
import pprint
import json
import time
import sys
import os
import re

from datetime import datetime

import vjk
import vjktz

def get_loglevel(num):
    lvl_nums = {
        4: logging.DEBUG,
        3: logging.DEBUG,
        2: logging.INFO,
        1: logging.WARNING,
        0: logging.ERROR,
    }
    if num in lvl_nums:
        return lvl_nums[num]
    return logging.ERROR

parser = argparse.ArgumentParser(prog='vjk.py')

parser.add_argument('--conf', dest = 'conf',
                    default = 'conf/vjk.json',
                    help = 'configuration file in JSON format')

sp = parser.add_subparsers(dest = 'cmd')
for cmd in ['start']:
    spp = sp.add_parser(cmd, help = 'Start an activity. \
                        Format "activity@category,comment".')

for cmd in ['restart']:
    spp = sp.add_parser(cmd, help = 'Restart last activity.')
    spp.add_argument('--id', dest = 'id', help = 'Activity ID',
                     required = False)
    spp.add_argument('--filter-category', dest = 'filter_category',
                     help = 'Filter by category')

for cmd in ['stop']:
    spp = sp.add_parser(cmd, help = 'Stop the current activity if running.')

for cmd in ['list']:
    spp = sp.add_parser(cmd, help = 'List activities/categories')
    spp.add_argument('--category', dest = 'category',
                     help = 'Show categories', action = 'store_true')
    spp.add_argument('--filter-category', dest = 'filter_category',
                     help = 'Filter by category')
    spp.add_argument('--summary', dest = 'summary',
                     help = 'Show summary time spent', action = 'store_true')
    spp.add_argument('--merge', dest = 'merge',
                     help = 'Merge same activities', action = 'store_true')
    spp.add_argument('--long', dest = 'long',
                     help = 'Long output for time records.', action = 'store_true')
    spp.add_argument('--raw', dest = 'raw',
                     help = 'Raw epoch output for time records.', action = 'store_true')
    spp.add_argument('--start', dest = 'start',
                     help = 'Time to report from. Format [-]number[w|d|h])')
    spp.add_argument('--stop', dest = 'stop',
                     help = 'Time to report until. Format [-]number[w|d|h])')
    spp.add_argument('--start-date', dest = 'start_date',
                     help = 'Date to report from. Format YYYY-MM-DD hh:mm:ss)')
    spp.add_argument('--stop-date', dest = 'stop_date',
                     help = 'Date to report until. Format YYYY-MM-DD hh:mm:ss)')
    spp.add_argument('--start-short-date', dest = 'start_short_date',
                     help = 'Date to report from. Format YYYY-MM-DD)')
    spp.add_argument('--stop-short-date', dest = 'stop_short_date',
                     help = 'Date to report until. Format YYYY-MM-DD)')

for cmd in ['add']:
    spp = sp.add_parser(cmd, help = 'Add category')
    spp.add_argument('--category', dest = 'category',
                     help = 'Category mode', action = 'store_true')

for cmd in ['edit']:
    spp = sp.add_parser(cmd, help = 'Edit activity/category')
    spp.add_argument('--category', dest = 'category',
                     help = 'Category mode', action = 'store_true')
    spp.add_argument('--start', dest = 'start',
                     help = 'Date and time activity started at. \
                     Format [YYYY-MM-DD] hh:mm:ss.')
    spp.add_argument('--stop', dest = 'stop',
                     help = 'Date and time activity stopped at. \
                     Format [YYYY-MM-DD] hh:mm:ss.')
    spp.add_argument('--id', dest = 'id', help = 'Activity/category ID',
                     required = True)

for cmd in ['delete']:
    spp = sp.add_parser(cmd, help = 'Delete activity/category')
    spp.add_argument('--category', dest = 'category',
                     help = 'Category mode', action = 'store_true')
    spp.add_argument('--id', dest = 'id', help = 'Activity/category ID',
                     required = True)

for cmd in ['exit']:
    spp = sp.add_parser(cmd, help = 'Stop the server')

args, unknown_args = parser.parse_known_args()
if args.cmd == None:
    parser.print_help()
    sys.exit(1)

conf = []

if args.conf != None and os.path.isfile(args.conf):
    with open(args.conf) as f:
        conf = json.load(f)
else:
    if 'VJKCONF' in os.environ:
        with open(os.environ['VJKCONF']) as f:
            conf = json.load(f)
    else:
        logging.error("Provide server configuration")
        sys.exit(1)

if 'loglevel-client' not in conf:
    loglevel = logging.DEBUG
else:
    loglevel = get_loglevel(conf['loglevel-client'])

logging.basicConfig(format = '%(asctime)s %(filename)s %(funcName)s %(message)s',
                    datefmt = '%m/%d/%Y %H:%M:%S', level = loglevel)

logging.debug('Configuration')
logging.debug(pprint.pformat(conf))
logging.debug(pprint.pformat(args))

def reply_ok(reply):
    '''Test if server reply is OK'''

    if reply:
        return reply.get('status') == 200
    return False

def reply_err(reply):
    '''Log server error and exit'''

    if reply == None:
        logging.error("ERR: Reply is empty")
    else:
        logging.error("ERR: Reply status %s data %s" %
                      (reply.get('status', ""),
                       reply.get('data', "")))
    sys.exit(1)

def reply_verify_data(reply):
    '''Validate server reply'''

    if reply_ok(reply):
        if reply.get('data'):
            return True
        return False

    reply_err(reply)
    return False

def verify_tz_record(vjktz, d, name):
    '''Verify if time offset is present and matches required'''

    v = d.get(name)
    if v == None:
        logging.error("No time offset record")
        return False
    elif int(v) != vjktz.tzoff():
        logging.error("Time offset record %d mismatches %d" %
                      int(v), vjktz.tzoff())
        return False
    return True

def merge_records(vjktz, reply):
    '''Merge records with same name updating
    stop time to account time spent'''

    merged = { }

    def mergeable(vjktz, x):
        #
        # Make sure it started and finished
        for i in ['tsstart', 'tsstop']:
            if not x.get(i):
                return False
        #
        # Verify timezones
        for name in ['tzstart', 'tzstop']:
            if not verify_tz_record(vjktz, x, name):
                return False
        return True

    #
    # Chain by names into arrays or records.
    # We need to keep index of the record in
    # original @reply['data'] array so we could
    # mark seen entries and skip them from report.
    for idx, rec in enumerate(reply['data']):
        name = rec.get('name')
        if not name:
            continue
        if merged.get(name):
            merged[name].append([idx, rec])
        else:
            merged[name] = [[idx, rec]]

    #
    # Preprocess merged records:
    # - drop entries with single record, which means
    #   we ran some activity only once so no need to
    #   to merge it and simply we will report it as is
    # - verify that start/stop times are present and
    #   timezone offset is immutable
    for name in [k for k in merged.keys()]:
        if len(merged[name]) == 1:
            del merged[name]
            continue
        for i in range(0, len(merged[name])):
            rec = merged[name][i][1]
            if not mergeable(vjktz, rec):
                del merged[name]
                break

    #
    # Now do a real merge procedure:
    # - mark merged records in original @reply['data']
    #   with a sign
    # - count summary spent time and adjust stop time
    #   for the first entry
    # - the rest of entries mark with 'skip' attribute
    for name in [k for k in merged.keys()]:
        pos = merged[name][0][0]
        top = reply['data'][pos]
        top['name'] += '*'
        top_epoch_start = int(top.get('tsstart'))
        top_epoch_stop = int(top.get('tsstop'))
        for i in range(1, len(merged[name])):
            pos = merged[name][i][0]
            rest = reply['data'][pos]
            rest_epoch_start = int(rest.get('tsstart'))
            rest_epoch_stop = int(rest.get('tsstop'))
            spent = rest_epoch_stop - rest_epoch_start
            top_epoch_stop += spent
            rest['skip'] = True
        top['tsstop'] = str(top_epoch_stop)
        del merged[name]

def cmd_handler_invalid(vjkcli, vjktz, args, unknown_args):
    '''Print help and exit'''

    parser.print_help()
    sys.exit(1)

def cmd_handler_activity_list(vjkcli, vjktz, args, unknown_args):
    '''List activities'''

    if args.start:
        report_from = vjktz.epoch_local_relative(args.start)
    elif args.start_date:
        report_from = vjktz.epoch_local_strptime_long(args.start_date)
    elif args.start_short_date:
        report_from = vjktz.epoch_local_strptime_short(args.start_short_date)
    else:
        #
        # If nothing specified use local today's start of day
        report_from = vjktz.epoch_local_000000()
    if report_from < 0:
        logging.error("Wrong start date/time specificator")
        return

    report_until = None
    if args.stop:
        report_until = vjktz.epoch_local_relative(args.stop)
    elif args.stop_date:
        report_until = vjktz.epoch_local_strptime_long(args.stop_date)
    elif args.stop_short_date:
        report_until = vjktz.epoch_local_strptime_short(args.stop_short_date)
    if report_until and report_until < 0:
        logging.error("Wrong stop date/time specificator")
        return

    catid = None
    if args.filter_category:
        reply = vjkcli.category_list(name=args.filter_category)
        if not reply_verify_data(reply):
            return
        if len(reply['data']) > 0:
            catid=reply['data'][0].get('id', None)

    #
    # We assume the time-zone offset is constant and
    # matches time-zone of the system. Otherwise this
    # needs to be fixed.
    reply = vjkcli.activity_list(report_from, report_until, catid=catid)
    if not reply_verify_data(reply):
        return

    if args.long:
        ts_len = 22
    elif args.raw:
        ts_len = 12
    else:
        ts_len = 10
    catlen = 8
    namelen = 4
    for x in reply['data']:
        catlen = max(len(x.get('category', '')), catlen)
        namelen = max(len(x.get('name', '')), namelen)

    summary = int(0)

    fmt = "{1:<{0:}}{3:<{2:}}{5:<{4:}}{7:<{6:}}{9:<{8:}}{11:<{10:}}{13:<{12:}}"
    print(fmt.format(6, 'ID',
                     (namelen + 2), 'Name',
                     catlen + 2, 'Category',
                     ts_len, 'Start',
                     ts_len, 'Stop',
                     14, 'Duration',
                     16, 'Comment'))

    #
    # When merging we're manging the name so user
    # will notice and extend stop time.
    if args.merge:
        merge_records(vjktz, reply)

    for x in reply['data']:
        if x.get('skip'):
            continue

        timestamp_start = int(x.get('tsstart', 0))
        if not verify_tz_record(vjktz, x, 'tzstart'):
            continue

        if timestamp_start < report_from:
            continue

        timestamp_stop = int(x.get('tsstop', 0))
        if timestamp_stop == 0:
            spent = vjktz.epoch() - timestamp_start
        else:
            if not verify_tz_record(vjktz, x, 'tzstop'):
                continue
            spent = timestamp_stop - timestamp_start

        if report_until and report_until < timestamp_start:
            continue

        if args.long:
            timestamp_start_str = vjktz.local_strftime_long(timestamp_start)
            if timestamp_stop > 0:
                timestamp_stop_str = vjktz.local_strftime_long(timestamp_stop)
        elif args.raw:
            timestamp_start_str = str(timestamp_start)
            if timestamp_stop > 0:
                timestamp_stop_str = str(timestamp_stop)
        else:
            timestamp_start_str = vjktz.local_strftime_short(timestamp_start)
            if timestamp_stop > 0:
                timestamp_stop_str = vjktz.local_strftime_short(timestamp_stop)

        if timestamp_stop <= 0:
            timestamp_stop_str = ''

        summary += spent
        h, m, s = vjktz.seconds_to_hms(spent)
        hms = "{0:04d}:{1:02d}:{2:02d}".format(h, m, s)

        print(fmt.format(6, x['id'],
                         (namelen + 2), x.get('name', ''),
                         catlen + 2, x.get('category', ''),
                         ts_len, timestamp_start_str,
                         ts_len, timestamp_stop_str,
                         14, hms,
                         16, x.get('comment', '')))

    if args.summary:
        h, m, s = vjktz.seconds_to_hms(summary)
        hms = "{0:04d}:{1:02d}:{2:02d}".format(h, m, s)
        print("---\nSummary: %s" % (hms))

def cmd_handler_category_list(vjkcli, vjktz, args, unknown_args):
    '''List categories'''

    reply = vjkcli.category_list()
    if not reply_verify_data(reply):
        return

    catlen = 8
    for x in reply['data']:
        catlen = max(len(x.get('category', '')), catlen)

    fmt = "{1:<{0:}}{3:<{2:}}"
    print(fmt.format(6, 'ID', catlen + 2, 'Category'))

    for x in reply['data']:
        print(fmt.format(6, x.get('id', ''),
                         catlen + 2, x.get('category','')))

def cmd_handler_delete_record(vjkcli, vjktz, args, unknown_args):
    '''Delete record by id'''

    if args.category:
        vjkcli.category_delete(int(args.id))
    else:
        vjkcli.activity_delete(int(args.id))

def cmd_handler_server_exit(vjkcli, vjktz, args, unknown_args):
    '''Exit server'''

    vjkcli.server_exit()

def parse_activity_argument(arg):
    '''Parse string in format activity@category|comment
    and return a tuple (activity,category,comment)'''

    m = re.match("([^\@]+)\@([^\,]+)(\,.+)?", arg)
    if m == None or m.group(1) == None or m.group(2) == None:
        return (None, None, None)

    comment = m.group(3)
    if comment != None:
        comment = m.group(3)[1:]

    return (m.group(1), m.group(2), comment)

def cmd_handler_activity_start(vjkcli, vjktz, args, unknown_args):
    '''Start new activity'''

    # Previous must be stopped
    last_rec = vjkcli.activity_last()
    if len(last_rec.get('data',[])):
        tsstop = last_rec['data'][0].get('tsstop')
        if not tsstop:
            logging.error("Found an unfinished activity, stop it first")
            return

    if len(unknown_args) < 1:
        logging.error("Not enough arguments provided")
        return

    activity, category, comment = parse_activity_argument(unknown_args[0])
    if activity == None:
        logging.error("Wrong activity format")
        return

    vjkcli.activity_add(vjktz.epoch(), None, activity, category, comment)

def cmd_handler_activity_stop(vjkcli, vjktz, args, unknown_args):
    '''Stop current activity'''

    vjkcli.activity_stop(vjktz.epoch())
    return

def cmd_handler_activity_restart(vjkcli, vjktz, args, unknown_args):
    '''Restart activity'''

    if args.id:
        last_rec = vjkcli.activity_list(activity_id=args.id)
    else:
        last_rec = vjkcli.activity_last(filter_category=args.filter_category)

    if 'data' not in last_rec or len(last_rec['data']) < 1:
        logging.error("Can't fetch data")
        return

    tsstop = last_rec['data'][0].get('tsstop')
    if not tsstop:
        logging.error("Found an unfinished activity, stop it first")
        return

    if not last_rec['data'][0].get('tsstop'):
        logging.error('Last activity is still active')

    rec  = last_rec['data'][0].get('name', '') + "@" + \
        last_rec['data'][0].get('category', '')

    comment = last_rec['data'][0].get('comment')
    if comment:
        rec += "," + comment

    cmd_handler_activity_start(vjkcli, vjktz, args, [rec])

def cmd_handler_category_add(vjkcli, vjktz, args, unknown_args):
    '''Add new category'''

    if len(unknown_args) < 1:
        logging.error("Not enough arguments provided")
        return

    vjkcli.category_add(unknown_args[0])

def cmd_handler_activity_edit(vjkcli, vjktz, args, unknown_args):
    '''Edit existing activity'''

    if len(unknown_args) > 0:
        activity, category, comment = parse_activity_argument(unknown_args[0])
    else:
        activity, category, comment = (None, None, None)

    args.start = vjktz.epoch_local_strptime_long(args.start)
    if args.start < 0:
        logging.error("Wrong start time format")

    if args.stop:
        args.stop = vjktz.epoch_local_strptime_long(args.stop)
        if args.stop < 0:
            logging.error("Wrong stop time format")

    vjkcli.activity_update(args.id, args.start, args.stop,
                           activity, category, comment)

def cmd_handler_category_edit(vjkcli, vjktz, args, unknown_args):
    '''Edit category'''

    if len(unknown_args) < 1:
        logging.error("Not enough arguments provided")
        return

    vjkcli.category_update(args.id, unknown_args[0])

cmd_handler = {
    'list':     [True,  cmd_handler_activity_list,      cmd_handler_category_list],
    'delete':   [True,  cmd_handler_delete_record,      cmd_handler_delete_record],
    'exit':     [False, cmd_handler_server_exit,        cmd_handler_invalid],
    'start':    [False, cmd_handler_activity_start,     cmd_handler_invalid],
    'restart':  [False, cmd_handler_activity_restart,   cmd_handler_invalid],
    'stop':     [False, cmd_handler_activity_stop,      cmd_handler_invalid],
    'add':      [True,  cmd_handler_invalid,            cmd_handler_category_add],
    'edit':     [True,  cmd_handler_activity_edit,      cmd_handler_category_edit],
}

vjkcli = vjk.Vjk(logging, conf)
if vjkcli.connected() == False:
    logging.error("Not connected")
    sys.exit(1)

vjktz = vjktz.VjkTz()

if args.cmd in cmd_handler:
    if cmd_handler[args.cmd][0]:
        if args.category:
            cmd_handler[args.cmd][2](vjkcli, vjktz, args, unknown_args)
        else:
            cmd_handler[args.cmd][1](vjkcli, vjktz, args, unknown_args)
    else:
        cmd_handler[args.cmd][1](vjkcli, vjktz, args, unknown_args)

vjkcli.fini()
